////////////////////////////////////////////////////////////////////////////
// $Id$
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"

#include <initguid.h>
#include <medparam.h>
#include "..\..\GenDMOProp\GenDMOProp.h"
#include "..\..\Common\CPUID.h"
#include <uuids.h>
#include "DMO_Lib.h"

/////////////////////////////////////////////////////////////////////////////
// DllRegisterServer - Adds entries to the system registry

STDAPI DMODllRegisterVideoDMO(LPCWSTR Name, const CLSID& Clsid)
{
    // Register ourself as a Video effect DMO
    DMO_PARTIAL_MEDIATYPE mt[2];
    mt[0].type    = MEDIATYPE_Video;
    mt[0].subtype = MEDIASUBTYPE_YUY2;
    mt[1].type    = MEDIATYPE_Video;
    mt[1].subtype = MEDIASUBTYPE_YV12;

    HRESULT hr = DMORegister(Name,
                             Clsid,
                             DMOCATEGORY_VIDEO_EFFECT,
                             0,
                             2,
                             &mt[0],
                             2,
                             &mt[0]);

    return hr;
}

STDAPI DMODllRegisterAudioDMO(LPCWSTR Name, const CLSID& Clsid, bool IsFloat)
{
    // Register ourself as a PCM audio effect DMO
    DMO_PARTIAL_MEDIATYPE mt;
    mt.type = MEDIATYPE_Audio;
    if(IsFloat)
    {
        mt.subtype = MEDIASUBTYPE_PCM;
    }
    else
    {
        mt.subtype = MEDIASUBTYPE_IEEE_FLOAT;
    }


    HRESULT hr = DMORegister(Name,
                             Clsid,
                             DMOCATEGORY_AUDIO_EFFECT,
                             0,
                             1,
                             &mt,
                             1,
                             &mt);
    // registers object
    return hr;
}

STDAPI DMODllRegisterDeintDMO(LPCWSTR Name, const CLSID& Clsid)
{
    // Register ourself as a video DMO
    DMO_PARTIAL_MEDIATYPE mt[2];
    mt[0].type    = MEDIATYPE_Video;
    mt[0].subtype = MEDIASUBTYPE_YUY2;
    mt[1].type    = MEDIATYPE_Video;
    mt[1].subtype = MEDIASUBTYPE_YV12;

    HRESULT hr = DMORegister(Name,
                             Clsid,
                             DMOCATEGORY_VIDEO_EFFECT,
                             0,
                             2,
                             &mt[0],
                             2,
                             &mt[0]);

    return hr;
}

/////////////////////////////////////////////////////////////////////////////
// DllUnregisterServer - Removes entries from the system registry

STDAPI DMODllUnregisterVideoDMO(const CLSID& Clsid)
{
       DMOUnregister(Clsid, DMOCATEGORY_VIDEO_EFFECT);
    return S_OK;
}

STDAPI DMODllUnregisterAudioDMO(const CLSID& Clsid)
{
       DMOUnregister(Clsid, DMOCATEGORY_AUDIO_EFFECT);
    return S_OK;
}

STDAPI DMODllUnregisterDeintDMO(const CLSID& Clsid)
{
    // \todo create special category
       DMOUnregister(Clsid, DMOCATEGORY_VIDEO_EFFECT);
    return S_OK;
}



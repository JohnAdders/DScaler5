////////////////////////////////////////////////////////////////////////////
// $Id$
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the 
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////

#pragma once 

#include "Params.h"
#include "CDMO.h"

/////////////////////////////////////////////////////////////////////////////
// CDMO
class CAudioDMO : 
    public CDMO
{
public:
    CAudioDMO(LPCWSTR Name);    // Constructor
    virtual ~CAudioDMO();    // Destructor

protected:
    //IMediaObjectImpl Methods   
    STDMETHODIMP InternalFlush(void);
    STDMETHODIMP InternalFreeStreamingResources(void);
    STDMETHODIMP InternalGetInputSizeInfo(DWORD dwInputStreamIndex, DWORD *pcbSize, DWORD *pcbMaxLookahead, DWORD *pcbAlignment);
    STDMETHODIMP InternalGetOutputSizeInfo(DWORD dwOutputStreamIndex, DWORD *pcbSize, DWORD *pcbAlignment);
    STDMETHODIMP InternalProcessInput(DWORD dwInputStreamIndex, IMediaBuffer *pBuffer, DWORD dwFlags, REFERENCE_TIME rtTimestamp, REFERENCE_TIME rtTimelength);
    STDMETHODIMP InternalProcessOutput(DWORD dwFlags, DWORD cOutputBufferCount, DMO_OUTPUT_DATA_BUFFER *pOutputBuffers, DWORD *pdwStatus);

    // IMediaObjectImpl Required overides
    virtual STDMETHODIMP InternalAcceptingInput(DWORD dwInputStreamIndex);

    // Private functions
    /** UpdateStatesInternal
        Override this function if you need to do maintain
        any information based on the parameters
    */
    virtual HRESULT DoProcess(BYTE *pbData, const BYTE *pbInputData, DWORD BytesToProcess) = 0;


    // States of the DMO

    SI(IMediaBuffer)         m_Buffer;            // Pointer to the input buffer
    BYTE*                   m_pbInputData;        // Pointer to the data in the input buffer
    DWORD                    m_cbInputLength;    // Length of the data

    REFERENCE_TIME            m_rtTimestamp;        // Most recent timestamp
    REFERENCE_TIME            m_rtTimelength;        // Most recent timelength
    bool                    m_bValidTime;        // Controls whether timestamp is valid or not
    bool                    m_bValidLength;        // Controls whether timelength is valid or not
    WAVEFORMATEXTENSIBLE    m_WaveFormat;
};



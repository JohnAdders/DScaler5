////////////////////////////////////////////////////////////////////////////
// $Id: CVideoDMO.h,v 1.1 2003-05-20 16:52:56 adcockj Exp $
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the 
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////
// CVS Log
//
// $Log: not supported by cvs2svn $
/////////////////////////////////////////////////////////////////////////////

#pragma once 

#include "param.h"
#include "CDMO.h"

#define MAX_FIELDS_IN_BUFFER 6

/////////////////////////////////////////////////////////////////////////////
// CDMO
class ATL_NO_VTABLE CVideoDMO : 
	public CDMO,
	public IDScalerVideoFilterPlugin
{
public:
    CVideoDMO(long FieldsToBuffer, long FieldsDelay, eVideoFilterPosition Position);
	virtual ~CVideoDMO();

BEGIN_COM_MAP(CVideoDMO)
	COM_INTERFACE_ENTRY(IDScalerVideoFilterPlugin)
    COM_INTERFACE_ENTRY_CHAIN(CDMO)
END_COM_MAP()

protected:
	//IMediaObjectImpl Methods   
	STDMETHOD(InternalDiscontinuity)(DWORD dwInputStreamIndex);
    STDMETHOD(InternalFlush)(void);
	STDMETHOD(InternalFreeStreamingResources)(void);
    STDMETHOD(InternalGetInputSizeInfo)(DWORD dwInputStreamIndex, DWORD *pcbSize, DWORD *pcbMaxLookahead, DWORD *pcbAlignment);
	STDMETHOD(InternalGetOutputSizeInfo)(DWORD dwOutputStreamIndex, DWORD *pcbSize, DWORD *pcbAlignment);
    STDMETHOD(InternalGetInputStreamInfo)(DWORD dwInputStreamIndex, DWORD *pdwFlags);
    STDMETHOD(InternalGetOutputStreamInfo)(DWORD dwInputStreamIndex, DWORD *pdwFlags);

	// IMediaObjectImpl Required overides
	STDMETHOD(InternalAcceptingInput)(DWORD dwInputStreamIndex);

public:
    // IDScalerVideoFilterPlugin
    STDMETHOD(get_Position)(eVideoFilterPosition* pPosition);
    STDMETHOD(get_NumFieldsDelay)(long* pFieldsDelay);
    STDMETHOD(get_NumFieldsBuffered)(long* pFieldsBuffered);

protected:
    virtual void RemoveOneFieldFromBuffer();

protected:
    typedef struct
    {
        BYTE* pLumaStart;
        BYTE* pChromaStart;
        BOOL IsTopLine;
        REFERENCE_TIME StartTime;
        REFERENCE_TIME Length;
        CComPtr<IMediaBuffer> m_Buffer;
    } TField;

    enum eState
    {
        STATE_START,
        STATE_RUNNING,
        STATE_FINISHING
    };
    
    TField m_IncomingFields[MAX_FIELDS_IN_BUFFER];
    long m_FieldsInBuffer;
    long m_NumFieldsToBuffer;
    long m_FieldsDelay;
    long m_StartFieldsDone;

    eState m_InternalState;
    eVideoFilterPosition m_Position;
};



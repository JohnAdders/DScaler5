////////////////////////////////////////////////////////////////////////////
// $Id: CVideoDMO.h,v 1.3 2003-10-31 17:19:37 adcockj Exp $
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the 
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////
// CVS Log
//
// $Log: not supported by cvs2svn $
// Revision 1.2  2003/05/21 17:06:00  adcockj
// Added new filter
//
// Revision 1.1  2003/05/20 16:52:56  adcockj
// Added new files
//
/////////////////////////////////////////////////////////////////////////////

#pragma once 

#include "param.h"
#include "CDMO.h"

#define MAX_FIELDS_IN_BUFFER 6

/////////////////////////////////////////////////////////////////////////////
// CDMO
class ATL_NO_VTABLE CVideoDMO : 
	public CDMO,
	public IDScalerVideoFilterPlugin,
    public IInterlacedBufferStack
{
public:
    CVideoDMO(long FieldsToBuffer, long FieldsDelay, eVideoFilterPosition Position);
	virtual ~CVideoDMO();

BEGIN_COM_MAP(CVideoDMO)
	COM_INTERFACE_ENTRY(IDScalerVideoFilterPlugin)
	COM_INTERFACE_ENTRY(IInterlacedBufferStack)
    COM_INTERFACE_ENTRY_CHAIN(CDMO)
END_COM_MAP()

//IMediaObjectImpl Methods   
protected:
	STDMETHOD(InternalDiscontinuity)(DWORD dwInputStreamIndex);
    STDMETHOD(InternalFlush)(void);
	STDMETHOD(InternalFreeStreamingResources)(void);
    STDMETHOD(InternalGetInputSizeInfo)(DWORD dwInputStreamIndex, DWORD *pcbSize, DWORD *pcbMaxLookahead, DWORD *pcbAlignment);
	STDMETHOD(InternalGetOutputSizeInfo)(DWORD dwOutputStreamIndex, DWORD *pcbSize, DWORD *pcbAlignment);
    STDMETHOD(InternalGetInputStreamInfo)(DWORD dwInputStreamIndex, DWORD *pdwFlags);
    STDMETHOD(InternalGetOutputStreamInfo)(DWORD dwInputStreamIndex, DWORD *pdwFlags);
	STDMETHOD(InternalAcceptingInput)(DWORD dwInputStreamIndex);

// IDScalerVideoFilterPlugin
public:
    STDMETHOD(get_Position)(eVideoFilterPosition* pPosition);
    STDMETHOD(get_NumFieldsDelay)(DWORD* pFieldsDelay);
    STDMETHOD(get_NumFieldsBuffered)(DWORD* pFieldsBuffered);

// IInterlacedBufferStack
public:
    STDMETHOD(PushSample)(IMediaSample* InputSample);
    STDMETHOD(get_NumFields)(DWORD* Count);
    STDMETHOD(GetField)(DWORD Index, IInterlacedField** Field);
    STDMETHOD(PopStack)();
    STDMETHOD(ClearAll)();

protected:
    virtual void RemoveOneFieldFromBuffer();

protected:
    class CField: public IInterlacedField
    {
    public:
		CField(){};
		~CField(){};
	    STDMETHOD(GetBufferAndLength)(BYTE** ppBuffer, DWORD* pcbLength);
	    STDMETHOD(GetMaxLength)(DWORD* pcbMaxLength);
	    STDMETHOD(SetLength)(DWORD cbLength);
        STDMETHOD(get_TopFieldFirst)(BOOLEAN* TopFieldFirst);
		STDMETHOD(QueryInterface)(const IID& iid, void** pInf) {*pInf = NULL; return S_OK;};
		ULONG STDMETHODCALLTYPE AddRef(void) {return 1;};
		ULONG STDMETHODCALLTYPE Release(void) {return 1;};
		void Clear()
		{
			IsTopLine = FALSE;
			StartTime = 0;
			Length = 0;
			m_Buffer.Release();
		};
		const CField& operator=(const CField& RHS)
		{
			IsTopLine = RHS.IsTopLine;
			StartTime = RHS.StartTime;
			Length = RHS.Length;
			m_Buffer = RHS.m_Buffer;
			return *this;
		}
    public:
        BOOL IsTopLine;
        REFERENCE_TIME StartTime;
        REFERENCE_TIME Length;
        CComPtr<IMediaBuffer> m_Buffer;
    };

    enum eState
    {
        STATE_START,
        STATE_RUNNING,
        STATE_FINISHING
    };
    
    CField m_IncomingFields[MAX_FIELDS_IN_BUFFER];
    DWORD m_FieldsInBuffer;
    DWORD m_NumFieldsToBuffer;
    DWORD m_FieldsDelay;
    DWORD m_StartFieldsDone;

    eState m_InternalState;
    eVideoFilterPosition m_Position;
};



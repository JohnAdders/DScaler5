////////////////////////////////////////////////////////////////////////////
// $Id: CDeintDMO.h,v 1.3 2003-05-21 13:41:11 adcockj Exp $
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the 
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////
// CVS Log
//
// $Log: not supported by cvs2svn $
// Revision 1.2  2003/05/20 16:50:57  adcockj
// Interim checkin, preparation for DMO processing path
//
// Revision 1.1  2003/05/16 16:19:12  adcockj
// Added new files into DMO framework
//
/////////////////////////////////////////////////////////////////////////////

#pragma once 

#include "CVideoDMO.h"

/////////////////////////////////////////////////////////////////////////////
// CInPlaceDMO
class ATL_NO_VTABLE CDeintDMO : 
    public CVideoDMO,
    public IDeinterlace
{

public:
    CDeintDMO(long FieldsToBuffer, long FieldsDelay, long Complexity);	// Constructor
	~CDeintDMO();	// Destructor

BEGIN_COM_MAP(CDeintDMO)
	COM_INTERFACE_ENTRY(IDeinterlace)
    COM_INTERFACE_ENTRY_CHAIN(CVideoDMO)
END_COM_MAP()


protected:
	//IMediaObjectImpl Methods   
	STDMETHOD(InternalProcessInput)(DWORD dwInputStreamIndex, IMediaBuffer *pBuffer, DWORD dwFlags, REFERENCE_TIME rtTimestamp, REFERENCE_TIME rtTimelength);
	STDMETHOD(InternalProcessOutput)(DWORD dwFlags, DWORD cOutputBufferCount, DMO_OUTPUT_DATA_BUFFER *pOutputBuffers, DWORD *pdwStatus);
    HRESULT InternalGetInputType(DWORD dwInputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);
	HRESULT InternalGetOutputType(DWORD dwOutputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);
    HRESULT InternalCheckInputType(DWORD dwInputStreamIndex, const DMO_MEDIA_TYPE *pmt);
    HRESULT InternalCheckOutputType(DWORD dwInputStreamIndex, const DMO_MEDIA_TYPE *pmt);

    // IDeinterlace methods
    STDMETHOD(get_ComplexityIndex)(long* pComplexity);

protected:
    virtual void ProcessSingleFrame(DMO_OUTPUT_DATA_BUFFER *pOutputBuffer);
    virtual void DoDeinterlacingMethod(DMO_OUTPUT_DATA_BUFFER *pOutputBuffer) = 0;
    void ProcessPlanarChroma(BYTE* pInputData, BYTE* pOutputData, VIDEOINFOHEADER2* InputInfo, VIDEOINFOHEADER2* OutputInfo);
    void ProcessPlanarChroma704(BYTE* pInputData, BYTE* pOutputData, VIDEOINFOHEADER2* InputInfo, VIDEOINFOHEADER2* OutputInfo);
    void BlackYUY2For8(BYTE* pOutputData);

protected:
    long m_ComplexityIndex;
};

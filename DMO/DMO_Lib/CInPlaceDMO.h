////////////////////////////////////////////////////////////////////////////
// $Id$
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////

#pragma once

#include "CDMO.h"


/////////////////////////////////////////////////////////////////////////////
// CInPlaceDMO
class CSimpleInPlaceVideoDMO :
    public CDMO,
    public IMediaObjectInPlace,
    public IDScalerVideoFilterPlugin
{
public:
    CSimpleInPlaceVideoDMO(LPCWSTR Name, eVideoFilterPosition Position);
    virtual ~CSimpleInPlaceVideoDMO();

public:
    // IMediaObjectInPlace Methods
    STDMETHOD(Process)(ULONG ulSize, BYTE *pData, REFERENCE_TIME refTimeStart,DWORD dwFlags);
    STDMETHOD(Clone)(IMediaObjectInPlace **ppMediaObject);
    STDMETHOD(GetLatency)(REFERENCE_TIME *pLatencyTime);

    //IMediaObjectImpl Methods
    STDMETHOD(InternalProcessInput)(DWORD dwInputStreamIndex, IMediaBuffer *pBuffer, DWORD dwFlags, REFERENCE_TIME rtTimestamp, REFERENCE_TIME rtTimelength);
    STDMETHOD(InternalProcessOutput)(DWORD dwFlags, DWORD cOutputBufferCount, DMO_OUTPUT_DATA_BUFFER *pOutputBuffers, DWORD *pdwStatus);
    HRESULT InternalGetInputType(DWORD dwInputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);
    HRESULT InternalGetOutputType(DWORD dwOutputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);
    HRESULT InternalCheckInputType(DWORD dwInputStreamIndex, const DMO_MEDIA_TYPE *pmt);
    HRESULT InternalCheckOutputType(DWORD dwInputStreamIndex, const DMO_MEDIA_TYPE *pmt);
    STDMETHOD(InternalDiscontinuity)(DWORD dwInputStreamIndex);
    STDMETHOD(InternalFlush)(void);
    STDMETHOD(InternalFreeStreamingResources)(void);
    STDMETHOD(InternalGetInputSizeInfo)(DWORD dwInputStreamIndex, DWORD *pcbSize, DWORD *pcbMaxLookahead, DWORD *pcbAlignment);
    STDMETHOD(InternalGetOutputSizeInfo)(DWORD dwOutputStreamIndex, DWORD *pcbSize, DWORD *pcbAlignment);
    STDMETHOD(InternalGetInputStreamInfo)(DWORD dwInputStreamIndex, DWORD *pdwFlags);
    STDMETHOD(InternalGetOutputStreamInfo)(DWORD dwInputStreamIndex, DWORD *pdwFlags);
    STDMETHOD(InternalAcceptingInput)(DWORD dwInputStreamIndex);

    // IDScalerVideoFilterPlugin
    STDMETHOD(get_Position)(eVideoFilterPosition* pPosition);
    STDMETHOD(get_NumFieldsDelay)(DWORD* pFieldsDelay);
    STDMETHOD(get_NumFieldsBuffered)(DWORD* pFieldsBuffered);

protected:
    virtual void DoProcess(DMO_OUTPUT_DATA_BUFFER *pOutputBuffer);
    virtual void DoProcessOnLineYUY2(const BYTE* pInput, BYTE* pOutput, int Bytes);
    virtual void DoProcessOnLumaLine(const BYTE* pInput, BYTE* pOutput, int Bytes);
    virtual void DoProcessOnUVLine(const BYTE* pInput, BYTE* pOutput, int Bytes);
    virtual void DoProcessOnULine(const BYTE* pInput, BYTE* pOutput, int Bytes);
    virtual void DoProcessOnVLine(const BYTE* pInput, BYTE* pOutput, int Bytes);
    virtual void DoInPlaceProcessOnLineYUY2(BYTE* pData, int Bytes);
    virtual void DoInPlaceProcessOnLumaLine(BYTE* pData, int Bytes);
    virtual void DoInPlaceProcessOnUVLine(BYTE* pData, int Bytes);
    virtual void DoInPlaceProcessOnULine(BYTE* pData, int Bytes);
    virtual void DoInPlaceProcessOnVLine(BYTE* pData, int Bytes);
protected:
    SI(IMediaBuffer) m_Buffer;
    eVideoFilterPosition m_Position;
    BOOL m_bValidTime;
    BOOL m_bSync;
    REFERENCE_TIME m_StartTime;
    REFERENCE_TIME m_Length;
};


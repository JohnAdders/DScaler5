////////////////////////////////////////////////////////////////////////////
// $Id: CInPlaceDMO.h,v 1.1 2003-05-16 16:19:12 adcockj Exp $
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the 
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////
// CVS Log
//
// $Log: not supported by cvs2svn $
/////////////////////////////////////////////////////////////////////////////

#pragma once 

#include "CDMO.h"


/////////////////////////////////////////////////////////////////////////////
// CInPlaceDMO
class ATL_NO_VTABLE CInPlaceDMO : 
    public CDMO,
	public IMediaObjectInPlace
{
friend class IMediaObjectImpl<CInPlaceDMO,1,1>;
friend class LockIt;

public:
    CInPlaceDMO();	// Constructor
	~CInPlaceDMO();	// Destructor

BEGIN_COM_MAP(CInPlaceDMO)
	COM_INTERFACE_ENTRY(IMediaObjectInPlace)
    COM_INTERFACE_ENTRY_CHAIN(CDMO)
END_COM_MAP()

public:
	// IMediaObjectInPlace Methods
	STDMETHODIMP STDMETHODCALLTYPE Process(ULONG ulSize, BYTE *pData, REFERENCE_TIME refTimeStart,DWORD dwFlags);

    
protected:
    virtual HRESULT DoProcess(BYTE *pbData) = 0;
};

template<class T> void Clone( T* ObjToBeCloned, IMediaObjectInPlace **ppMediaObject)
{
	// Check the input pointer
	if (!ppMediaObject)
	{
		return E_POINTER;
	}

    // This will be cleaned up when client releases the newly created object
    // or if there's some error along the way
	T * pNewInPlace = new CComObject<T>;
	if( !pNewInPlace )
	{
		return E_OUTOFMEMORY;
	}

	HRESULT hr = S_OK;

	hr = pNewInPlace->UpdateStatesInternal();

	IMediaObject* pCloned = NULL;
	if(SUCCEEDED(hr))
	{
		IUnknown *pUnk;
		hr = pNewInPlace->QueryInterface( IID_IUnknown, (void **) &pUnk );
		if( SUCCEEDED( hr ) )
		{
			hr = pUnk->QueryInterface( IID_IMediaObject, (void **) &pCloned );
			pUnk->Release();
		}
	}

	// Copy parameter control information
    // \todo make sure this function also copies the values
	if (SUCCEEDED(hr))
	{
		hr = pNewInPlace->CopyParamsFromSource((CParamsManager *)ObjToBeCloned);
	}


	// Copy the input and output types
	if (SUCCEEDED(hr))
	{
		DMO_MEDIA_TYPE mt;
		DWORD cInputStreams = 0;
		DWORD cOutputStreams = 0;
		ObjToBeCloned->GetStreamCount(&cInputStreams, &cOutputStreams);

		for (DWORD i = 0; i < ObjToBeCloned->cInputStreams && SUCCEEDED(hr); ++i)
		{
			hr = ObjToBeCloned->GetInputCurrentType(i, &mt);
			if (hr == DMO_E_TYPE_NOT_SET)
			{
				hr = S_OK; // great, don't need to set the cloned DMO
			}
			else if (SUCCEEDED(hr))
			{
				hr = pCloned->SetInputType(i, &mt, 0);
				MoFreeMediaType( &mt );
			}
		}

		for (i = 0; i < ObjToBeCloned->cOutputStreams && SUCCEEDED(hr); ++i)
		{
			hr = ObjToBeCloned->GetOutputCurrentType(i, &mt);
			if (hr == DMO_E_TYPE_NOT_SET)
			{
				hr = S_OK; // great, don't need to set the cloned DMO
			}
			else if (SUCCEEDED(hr))
			{
				hr = pCloned->SetOutputType(i, &mt, 0);
				MoFreeMediaType( &mt );
			}
		}

		if (SUCCEEDED(hr))
		{
			hr = pCloned->QueryInterface(IID_IMediaObjectInPlace, (void**)ppMediaObject);
		}

		// Release the object's original ref.  If clone succeeded (made it through QI) then returned pointer
		// has one ref.  If we failed, refs drop to zero, freeing the object.
		pCloned->Release();
	}

    // Something went wrong, clean up for client
    if (FAILED(hr))
    {
        delete pNewInPlace;
    }

	return hr;
}


////////////////////////////////////////////////////////////////////////////
// $Id: Video_Gamma.cpp,v 1.1 2003-05-21 17:06:01 adcockj Exp $
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the 
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////
// CVS Log
//
// $Log: not supported by cvs2svn $
/////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "Video_Gamma.h"

static ParamInfo* g_params = NULL;

// Bob method requires :
//  1 field to operate on
//  Doesn't introduce any delay
//  And has the lowest complexity possible
CVideo_Gamma::CVideo_Gamma() :
    CSimpleInPlaceVideoDMO(POST_FD_PRE_DEINT_2)
{
	// Initialize parameters in IMediaParam
	InitParams(1, &GUID_TIME_REFERENCE, 0, 0, 0, g_params);

}

CVideo_Gamma::~CVideo_Gamma()
{
}

HRESULT CVideo_Gamma::SetParamInternal(DWORD dwParamIndex, MP_DATA value, bool fSkipPasssingToParamManager)
{
    return S_OK;
}

HRESULT CVideo_Gamma::GetClassID(CLSID *pClsid)
{
	// Check for valid pointer
	if( NULL == pClsid )
	{
		return E_POINTER;
	}

	*pClsid = __uuidof(CVideo_Gamma);
	return S_OK;

} // GetClassID

STDMETHODIMP CVideo_Gamma::get_Name(BSTR* Name)
{
    if(Name == NULL)
    {
        return E_POINTER;
    }
    CComBSTR Result;
    if(Result.LoadString(IDS_NAME))
    {
        return Result.CopyTo(Name);
    }
    else
    {
        return E_UNEXPECTED;
    }
}

STDMETHODIMP CVideo_Gamma::get_License(eFreeLicense* License)
{
    if(License == NULL)
    {
        return E_POINTER;
    }
    *License = LGPL;
    return S_OK;
}

STDMETHODIMP CVideo_Gamma::get_Authors(BSTR* Authors)
{
    if(Authors == NULL)
    {
        return E_POINTER;
    }
    CComBSTR Result;
    if(Result.LoadString(IDS_AUTHORS))
    {
        return Result.CopyTo(Authors);
    }
    else
    {
        return E_UNEXPECTED;
    }
}


///////////////////////
//
// Required ATL COM stuff
//
CComModule _Module;

BEGIN_OBJECT_MAP(ObjectMap)
OBJECT_ENTRY(__uuidof(CVideo_Gamma), CVideo_Gamma)
END_OBJECT_MAP()

extern "C"
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
{
	if (DLL_PROCESS_ATTACH == dwReason)
	{
		_Module.Init(ObjectMap, hInstance);
		DisableThreadLibraryCalls(hInstance);
	}
	else if (DLL_PROCESS_DETACH == dwReason)
    {
		_Module.Term();
    }
	return TRUE;    // ok
}

STDAPI DllRegisterServer()
{
    return DMODllRegisterVideoDMO(L"Gamma", __uuidof(CVideo_Gamma));
}

STDAPI DllUnregisterServer()
{
    return DMODllUnregisterVideoDMO(__uuidof(CVideo_Gamma));
}

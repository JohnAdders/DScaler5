////////////////////////////////////////////////////////////////////////////
// $Id$
/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 John Adcock.  All rights reserved.
// This software was based on sample code generated by the 
// DMO project wizard.  That code is (c) Microsoft Corporation
/////////////////////////////////////////////////////////////////////////////
//
// This file is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details
//
/////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include <initguid.h>
#include "Deint_Bob.h"
#include "yacl\include\combook.cpp"

HINSTANCE g_hInstance = NULL;


// Bob method requires :
//  1 field to operate on
//  Doesn't introduce any delay
//  And has the lowest complexity possible
CDeint_Bob::CDeint_Bob() :
    CDeintDMO(L"Bob", 1, 0, 0)
{

}

CDeint_Bob::~CDeint_Bob()
{
}

HRESULT CDeint_Bob::Process(IInterlacedBufferStack* Stack, IMediaBuffer* pOutputBuffer)
{
    return ProcessSingleFrame(Stack, pOutputBuffer, 0);
}

HRESULT CDeint_Bob::GetClassID(CLSID *pClsid)
{
    // Check for valid pointer
    if( NULL == pClsid )
    {
        return E_POINTER;
    }

    *pClsid = CLSID_CDeint_Bob;
    return S_OK;

} // GetClassID

STDMETHODIMP CDeint_Bob::get_Name(BSTR* Name)
{
    if(Name == NULL)
    {
        return E_POINTER;
    }
    TCHAR Result[MAX_PATH];
    if(LoadString(g_hInstance, IDS_NAME, Result, MAX_PATH))
    {
        wchar_t wResult[MAX_PATH];
        ustrcpy(wResult, Result);
        *Name = SysAllocString(wResult);
        return S_OK;
    }
    else
    {
        return E_UNEXPECTED;
    }
}

STDMETHODIMP CDeint_Bob::get_License(eFreeLicense* License)
{
    if(License == NULL)
    {
        return E_POINTER;
    }
    *License = LGPL;
    return S_OK;
}

STDMETHODIMP CDeint_Bob::get_Authors(BSTR* Authors)
{
    if(Authors == NULL)
    {
        return E_POINTER;
    }
    TCHAR Result[MAX_PATH];
    if(LoadString(g_hInstance, IDS_AUTHORS, Result, MAX_PATH))
    {
        wchar_t wResult[MAX_PATH];
        ustrcpy(wResult, Result);
        *Authors = SysAllocString(wResult);
        return S_OK;
    }
    else
    {
        return E_UNEXPECTED;
    }
}

HRESULT CDeint_Bob::ParamChanged(DWORD dwParamIndex)
{
    // there are no parameters
    return E_UNEXPECTED;
}

///////////////////////
//
// Required COM stuff
//

BEGIN_COCLASS_TABLE(Classes)
    IMPLEMENTS_COCLASS(CDeint_Bob)
END_COCLASS_TABLE()

IMPLEMENT_DLL_MODULE_ROUTINES()

extern "C"
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
{
    if (DLL_PROCESS_ATTACH == dwReason)
    {
        g_hInstance = hInstance;
        DisableThreadLibraryCalls(hInstance);
    }
    else if (DLL_PROCESS_DETACH == dwReason)
    {
    }
    return TRUE;    // ok
}

STDAPI DllRegisterServer()
{
    HRESULT hr = DMODllRegisterDeintDMO(L"Bob", CLSID_CDeint_Bob);
    if(FAILED(hr))
    {
        return hr;
    }
    return ClassTableUpdateRegistry(GetThisInstance(), Classes, 0, FALSE, TRUE);
}

STDAPI DllUnregisterServer()
{
    HRESULT hr = DMODllUnregisterDeintDMO(CLSID_CDeint_Bob);
    if(FAILED(hr))
    {
        return hr;
    }
    return ClassTableUpdateRegistry(GetThisInstance(), Classes, 0, FALSE, FALSE);
}


STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, void **ppv)
{
    return ClassTableGetClassObject(Classes, rclsid, riid, ppv);
}

STDAPI DllCanUnloadNow(void)
{
    return ModuleIsIdle() ? S_OK : S_FALSE;
}
